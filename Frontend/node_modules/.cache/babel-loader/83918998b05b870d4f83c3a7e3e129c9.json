{"ast":null,"code":"const API_BASE_URL = 'http://localhost:5225/users';\nexport const fetchUsers = async function (currentPage, pageSize) {\n  let searchTerm = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  const searchQuery = searchTerm ? `&searchTerm=${searchTerm}` : '';\n  const response = await fetch(`${API_BASE_URL}/?pageNumber=${currentPage}&pageSize=${pageSize}${searchQuery}`);\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch users');\n  }\n\n  const data = await response.json();\n  return data;\n};\nexport const fetchUserById = async userId => {\n  const response = await fetch(`${API_BASE_URL}/${userId}`);\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch user');\n  }\n\n  const data = await response.json();\n  return data;\n};\nexport const updateUser = async user => {\n  const response = await fetch(`${API_BASE_URL}/${user.id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to update user');\n  }\n};\nexport const deleteUser = async userId => {\n  const response = await fetch(`${API_BASE_URL}/${userId}`, {\n    method: 'DELETE'\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to delete user');\n  }\n};","map":{"version":3,"sources":["D:/medfar_assessment/Utsa-Rabbani/Frontend/src/api/api.tsx"],"names":["API_BASE_URL","fetchUsers","currentPage","pageSize","searchTerm","searchQuery","response","fetch","ok","Error","data","json","fetchUserById","userId","updateUser","user","id","method","headers","body","JSON","stringify","deleteUser"],"mappings":"AAAA,MAAMA,YAAY,GAAG,6BAArB;AAEA,OAAO,MAAMC,UAAU,GAAG,gBAAOC,WAAP,EAA4BC,QAA5B,EAA2F;AAAA,MAA7CC,UAA6C,uEAAxB,EAAwB;AACjH,QAAMC,WAAW,GAAGD,UAAU,GAAI,eAAcA,UAAW,EAA7B,GAAiC,EAA/D;AACA,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,gBAAeE,WAAY,aAAYC,QAAS,GAAEE,WAAY,EAA/E,CAA5B;;AACA,MAAI,CAACC,QAAQ,CAACE,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,QAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,SAAOD,IAAP;AACH,CARM;AAUP,OAAO,MAAME,aAAa,GAAG,MAAOC,MAAP,IAAyC;AAClE,QAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,IAAGa,MAAO,EAA3B,CAA5B;;AACA,MAAI,CAACP,QAAQ,CAACE,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACH;;AACD,QAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACA,SAAOD,IAAP;AACH,CAPM;AASP,OAAO,MAAMI,UAAU,GAAG,MAAOC,IAAP,IAAqC;AAC3D,QAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,IAAGe,IAAI,CAACC,EAAG,EAA5B,EAA+B;AACvDC,IAAAA,MAAM,EAAE,KAD+C;AAEvDC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAF8C;AAKvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALiD,GAA/B,CAA5B;;AAOA,MAAI,CAACT,QAAQ,CAACE,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;AACJ,CAXM;AAaP,OAAO,MAAMa,UAAU,GAAG,MAAOT,MAAP,IAAyC;AAC/D,QAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEP,YAAa,IAAGa,MAAO,EAA3B,EAA8B;AACtDI,IAAAA,MAAM,EAAE;AAD8C,GAA9B,CAA5B;;AAGA,MAAI,CAACX,QAAQ,CAACE,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;AACJ,CAPM","sourcesContent":["const API_BASE_URL = 'http://localhost:5225/users';\r\n\r\nexport const fetchUsers = async (currentPage: number, pageSize: number, searchTerm: string = ''): Promise<User[]> => {\r\n    const searchQuery = searchTerm ? `&searchTerm=${searchTerm}` : '';\r\n    const response = await fetch(`${API_BASE_URL}/?pageNumber=${currentPage}&pageSize=${pageSize}${searchQuery}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch users');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n};\r\n\r\nexport const fetchUserById = async (userId: string): Promise<User> => {\r\n    const response = await fetch(`${API_BASE_URL}/${userId}`);\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch user');\r\n    }\r\n    const data = await response.json();\r\n    return data;\r\n};\r\n\r\nexport const updateUser = async (user: User): Promise<void> => {\r\n    const response = await fetch(`${API_BASE_URL}/${user.id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(user)\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to update user');\r\n    }\r\n};\r\n\r\nexport const deleteUser = async (userId: string): Promise<void> => {\r\n    const response = await fetch(`${API_BASE_URL}/${userId}`, {\r\n        method: 'DELETE',\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error('Failed to delete user');\r\n    }\r\n};\r\n\r\nexport interface User {\r\n    id: string;  // User ID as a string representing a GUID\r\n    first_name: string;\r\n    last_name: string;\r\n    email: string;\r\n    date_created: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}